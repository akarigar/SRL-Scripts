program NoobOMaticChef;
{$DEFINE SMART}

{$i akarigar/engine.simba}
{$i akarigar/lib/tasks/TBankTask.simba}
{$i akarigar/lib/tasks/TCookTask.simba}

{$ContinueCase ON}
{$f-}

const
  P_SAFE_LEVEL := 0;
  P_ITEM_XP := 1;
  FAIL_MAX := 25;

procedure doAntiBan();
begin
  case random(600) of
    1..10: sleepAndMoveMouse(randomRange(150, 1000));
    11..20:
    begin
      if random() > 0.75 then hoverSkill(SKILL_SMITHING)
      else hoverRandomSkill();
      continue;
    end;
    21..35:
    begin
      if random() > 0.5 then pickupMouse();
      smallRandomMouse(gaussRangeInt(400, 1200));
      wait(randomRange(500, 1000));
    end;
    36..150: if not minimap.isPlayerMoving() then mouseOffClient(OFF_CLIENT_RANDOM);
  end;
  if progressScreen.isOpen(500) then
    wait(gaussRangeInt(500, 3000))
  else
    wait(gaussRangeInt(0, 750));
end;

function TActivity.__xpGained(): integer;
begin
  if self.tasks.size() >= 2 then
    exit(round(self.tasks[1]^.itemsGained * self.tasks[1]^.xpPerItem));
  exit(0);
end;

function TActivity.__cookAtLumbridge(): boolean;
begin
  exit(
    self.__xpGained() + players[currentPlayer].skillLevel[SKILL_COOKING] <
    XP_AT_LEVEL[players[currentPlayer].integers[P_SAFE_LEVEL]]
  );
end;

function TActivity.__setup(): boolean;
begin
  players[currentPlayer].skillLevel[SKILL_COOKING] :=
    tabStats.getSkillInfo(SKILL_COOKING, INFO_CURRENT_XP);

  if self.__cookAtLumbridge() then
    begin
      self.tasks.append(BankTask(
        LOCATION_LUMBRIDGE,
        FAIL_MAX,
        BANK_BUTTON_PRESET_1,
        [Point(100, 264), Point(134, 263), Point(182, 263), Point(179, 216), Point(153, 187), Point(134, 166), Point(118, 122), Point(99, 100)]
      ));
      self.tasks.append(CookTask(
        LOCATION_LUMBRIDGE,
        FAIL_MAX,
        players[currentPlayer].extendeds[P_ITEM_XP],
        [Point(99, 100), Point(118, 122), Point(134, 166), Point(153, 187), Point(179, 216), Point(182, 263), Point(134, 263), Point(100, 264)]
      ));
      exit(lodestoneScreen.teleportTo(LOCATION_LUMBRIDGE) and engine.randomlyWait(15000, 17000));
    end;

  self.tasks.append(BankTask(
      LOCATION_AL_KHARID,
      FAIL_MAX,
      BANK_BUTTON_PRESET_1,
      [Point(393, 179), Point(415, 179), Point(386, 238)]
    ));
  self.tasks.append(CookTask(
    LOCATION_AL_KHARID,
    FAIL_MAX,
    players[currentPlayer].extendeds[P_ITEM_XP],
    [Point(386, 238), Point(415, 179), Point(393, 179)]
  ));
  exit(lodestoneScreen.teleportTo(LOCATION_AL_KHARID) and engine.randomlyWait(15000, 17000));
end;

function TActivity.__isDone(): boolean;
var task: PTask;
begin
  if (self.tasks.isEmpty()) or (self.tasks.size() < 2) then exit(true);

  task := self.tasks[1];
  if task^.location = LOCATION_AL_KHARID then exit(false);

  exit(not self.__cookAtLumbridge());
end;

function loadActivity(): PActivity;
var activity: PActivity;
begin
  new(activity);
  activity^.name := 'Noob-O-Matic Chef';
  activity^.isDone := activity^.__isDone;
  activity^.setup := activity^.__setup;
  exit(activity);
end;

procedure declarePlayers();
var i: integer;
begin
  for i := 0 to high(players) do
    with playerForm.players[i] do
    begin
      players[i].integers[P_SAFE_LEVEL] := strToInt(settings[0]);
      players[i].extendeds[P_ITEM_XP] := strToFloat(settings[1]);
    end;
end;

procedure initPlayerForm();
begin
  playerForm.name := 'Noob-O-Matic Chef';

  // Setup edit boxes
  playerForm.editBoxLabels := ['Cooking level to stop burning', 'XP gained per item'];
  playerForm.editBoxDefaults := ['32', '30'];
  playerForm.editBoxHints := [
    'Use 0 if you do not want to use the Cook-O-Matic.',
    'The XP gained by cooking one raw food.'
  ];
end;

begin
  clearDebug();

  initPlayerForm();
  engine
    .loadArea('NOOB_O_MATIC_CHEF')
    .setAntiBan(doAntiBan)
    .setDeclarePlayers(declarePlayers)
    .setActivityLoader(loadActivity)
    .run();
end.
