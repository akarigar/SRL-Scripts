{$IFDEF DEBUG}
  {$IFDEF SMART}
    {$DEFINE SMART_DEBUG}
  {$ENDIF}
{$ENDIF}

{$include_once srl-6/srl.simba}
{$include_once srl-6/lib/misc/srlplayerform.simba}

{$include_once SPS/lib/sps-rs3.simba}


{$include_once engine/util/util.simba}

{$include_once engine/core/objectsettings.simba}
{$include_once engine/core/item.simba}
{$include_once engine/core/playermanager.simba}
{$include_once engine/core/resourcemanager.simba}
{$include_once engine/core/task.simba}
{$include_once engine/core/activity.simba}
{$include_once engine/core/activitymanager.simba}
{$f-}

type TEngine = record
  declarePlayers: procedure();

  __activityManager: TActivityManager;
end;

var engine: TEngine;

// Setters =====================================================================

procedure TEngine.setAntiBan(antiBan: procedure());
begin
  SRL_Events[EVENT_ANTIBAN] := antiBan;
end;

procedure TEngine.setDeclarePlayers(declarePlayers: procedure());
begin
  self.declarePlayers := declarePlayers;
end;

// End Setters =================================================================

procedure TEngine.loadArea(mapName: string);
begin
  playerManager.loadArea(mapName);
end;

procedure TEngine.__declarePlayers();
var
  i: integer;
begin
  players.setup(playerForm.players);

  if self.declarePlayers <> nil then
    self.declarePlayers();

  for i := 0 to high(players) do
    with playerForm.players[i] do
    begin
      players[i].world := strToInt(settings[high(playerForm.editBoxLabels) - 2]);
      players[i].integers[P_PLAY_TIME] := strToInt(settings[high(playerForm.editBoxLabels) - 1]) * 60000;
      players[i].integers[P_BREAK_LENGTH] := strToInt(settings[high(playerForm.editBoxLabels)]) * 60000;
      players[i].booleans[P_TAKE_BREAKS] := strToBool(settings[high(settings)]);

      // Set up the time for the next break, if we are taking breaks.
      if players[i].booleans[P_TAKE_BREAKS] then
        players[i].integers[P_NEXT_BREAK] := getGaussRangePercentage(players[i].integers[P_PLAY_TIME], 0.2);
    end;
end;

procedure TEngine.__destroy();
begin
  self.__activityManager.destroy();
  resourceManager.clear();
end;

procedure TEngine.__initPlayerForm();
begin
  with playerForm do
  begin
    if length(name) = 0 then
      name := 'All In One Runescape';

    editBoxLabels.combine(['World', 'Take a break around (mins)', 'Duration of break (mins)']);
    editBoxDefaults.combine(['-1', '60', '5']);
    editBoxHints.combine([
      'What world to use? (-1 means use current, 0 means use random)',
      'Around how long to run before taking a break?',
      'Around how long should the break be?'
    ]);

    checkBoxLabels.combine(['Take Breaks']);
    checkBoxDefaults.combine(['True']);
    checkBoxHints.combine(['Should I take breaks?']);
  end;
end;

procedure TEngine.__runLoop();
var timer: TTimeMarker;
begin
  print('TEngine.__runLoop()');
  while players.getActive() > 0 do
  begin
    timer.start();
    if not isLoggedIn() then players[currentPlayer].login();
    wait(Random(500, 1500));
    closeAdWindow();
    closePollWindow();
    exitTreasure();
    mainscreen.setAngle(MS_ANGLE_HIGH);

    // Setup activity if needed & only start loop if everything is fine.
    self.__activityManager.next();

    with players[currentPlayer] do
    begin
      while playerManager.isActive() and (not self.__activityManager.isActivityDone()) and
          ((not booleans[P_TAKE_BREAKS]) or (timer.getTime() <= integers[P_NEXT_BREAK])) do
      begin
        isActive := self.__activityManager.run();
        inc(integers[P_LOOP_COUNT]);

        self.__activityManager.printProgress(integers[P_TIME_RAN] + timer.getTime());
      end;
    end;
    writeLn('isDone? ', self.__activityManager.isActivityDone());
    inc(players[currentPlayer].integers[P_TIME_RAN], timer.getTime());

    if self.__activityManager.isActivityDone() then
      self.__activityManager.next()

    if players[currentPlayer].isActive then
      if timer.getTime() > players[currentPlayer].integers[P_NEXT_BREAK] then
        playerManager.takeBreak()
    else if players.getActive() > 0 then
    begin
      players.randomNext(false);
      resourceManager.setup(players[currentPlayer].nickname);
    end;

    if isLoggedIn() then
      players[currentPlayer].logout();
    timer.reset();
  end;
end;

function TEngine.run(): boolean;
begin
  self.__initPlayerForm();
  runPlayerForm();
  if not playerForm.isScriptReady then exit(false);

  self.__declarePlayers();
  {$IFDEF SMART_DEBUG}
  smartEnableDrawing := true;
  {$ENDIF}
  if not setupSRL() then exit(false);

  resourceManager.setup(players[currentPlayer].nickname);
  addOnTerminate('destroyEngine');
  self.__runLoop();
  exit(true);
end;

procedure destroyEngine();
begin
  engine.__destroy();
end;

