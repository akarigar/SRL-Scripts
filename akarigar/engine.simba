{$include_once srl-6/srl.simba}
{$include_once srl-6/lib/misc/srlplayerform.simba}
{$include_once SPS/lib/sps-rs3.simba}

{$include_once lib/core/activity.simba}
{$include_once lib/core/task.simba}
{$include_once lib/util/util.simba}
{$f-}

{ This is just a very initial design, it is missing some key things
  (like dependency, biometrics, etc). Much of the stuff here is still not
  finalized. I'm going to be adding things as needed. I'll be moving things out
  of this and making their own files as they become big.
}

const
  // Integers
  P_BREAK_COUNT := 99;
  P_BREAK_LENGTH := P_BREAK_COUNT - 1;
  P_LOOP_COUNT := P_BREAK_LENGTH - 1;
  P_NEXT_BREAK := P_LOOP_COUNT - 1;
  P_PLAY_TIME := P_NEXT_BREAK - 1;
  P_TIME_BREAKED := P_PLAY_TIME - 1;
  P_TIME_RAN := P_TIME_BREAKED - 1;

  // Booleans
  P_TAKE_BREAKS := 99;

type TEngine = record
  antiBan, declarePlayers: procedure();
  loadActivity: function(): PActivity;

  __activity: PActivity;
end;

var
  engine: TEngine = [nil, nil, nil, nil];
  currentArea: TSPSArea;

// Setters =====================================================================

function TEngine.setActivityLoader(loadActivity: function(): PActivity): TEngine;
begin
  self.loadActivity := loadActivity;
  exit(self);
end;

function TEngine.setAntiBan(antiBan: procedure()): TEngine;
begin
  self.antiBan := antiBan;
  exit(self);
end;

function TEngine.setDeclarePlayers(declarePlayers: procedure()): TEngine;
begin
  self.declarePlayers := declarePlayers;
  exit(self);
end;


// End Setters =================================================================

function TEngine.loadArea(mapName: string): TEngine;
begin
  currentArea.setup(mapName, RUNESCAPE_OTHER);
  exit(self);
end;

procedure TEngine.printProgress(timeRan: integer);
var
  i: integer;
  totalXp: extended = 0;
  task: PTask;
begin
  with players[currentPlayer] do
  begin
    writeLn('================================================================');
    if length(playerForm.name) = 0 then
      writeLn('Progress Report')
    else
      writeLn(playerForm.name, ' Progress Report');
    writeLn('Player[', currentPlayer, ']: ', nickname);
    writeLn('Played for ', msToTime(timeRan, TIME_FORMAL));
    writeLn('Breaked for ', msToTime(integers[P_TIME_BREAKED], TIME_FORMAL),' (',
            integers[P_BREAK_COUNT], ' breaks)');

    writeLn('Activity ', self.__activity^.name, ' looped ', integers[P_LOOP_COUNT], ' times');
    for i := 0 to high(self.__activity^.tasks) do
    begin
      task := self.__activity^.tasks[i];
      if (task^.xpPerItem <= 0) or (task^.reportProgress = nil) then continue;
      totalXp += task^.reportProgress(timeRan);
    end;

    writeLn(formatProgressLine('Total XP: %d (%d/hr)', round(totalXp), timeRan));
    writeLn('================================================================');
  end;
end;

function TEngine.randomlyWait(min: integer = 250; max: integer = 750): boolean;
begin
  wait(gaussRangeInt(min, max));
  exit(true);
end;

procedure TEngine.takeBreak(time: integer);
var
  timeRemaining: integer;
  timer: TTimeMarker;
begin
  with players[currentPlayer] do
  begin
    timeRemaining := time := getGaussRangePercentage(time);
    writeLn('Taking a break for ', msToTime(timeRemaining, TIME_SHORT));

    if isLoggedIn() then
      if Random() > 0.8 then logout()
      else exitToLobby();

    timer.start();
    while (timeRemaining := time - timer.getTime()) > 45000 do
    begin
      writeLn('Break finishes in ', msToTime(timeRemaining, TIME_SHORT));
      wait(45000);
    end;
    if timeRemaining > 0 then
      wait(timeRemaining);


    inc(integers[P_TIME_BREAKED], timer.getTime());
    inc(integers[P_BREAK_COUNT]);
    integers[P_NEXT_BREAK] := getGaussRangePercentage(integers[P_PLAY_TIME], 0.2);
    writeLn('Break finished. Resuming script');
  end;
end;

function TEngine.useObject(
  color, tolerance: integer;
  colorSettings: TColorSettings;
  bounds: TBox;
  midPoint: TPoint;
  overText: TStringArray
): boolean;
var
  i, x, y: Integer;
  tpa: TPointArray;
  atpa: T2DPointArray;
begin
  if not findColorsSpiralTolerance(x, y, tpa, color, bounds, tolerance, colorSettings) then
    exit(false);

  mainscreen.filterPointsPlayer(tpa);
  atpa := tpa.toATPA(25, 25);
  if midPoint.x = -1 or midPoint.y = -1 then
    atpa.sortBySize()
  else
    atpa.sortFromMidPoint(midPoint);

  for i := 0 to high(atpa) do
  begin
    mouseBox(atpa[i].getBounds());
    if self.randomlyWait() and isMouseOverText(overText)  then
    begin
      fastClick(mouse_left);
      exit(self.randomlyWait() and minimap.waitPlayerMoving());
    end;
  end;
  exit(false);
end;

function TEngine.useObject(
  color, tolerance: integer;
  colorSettings: TColorSettings;
  bounds: TBox;
  midPoint: TPoint;
  overText: TStringArray;
  tries: integer
): boolean; overload;
var i: integer;
begin
  result := false;
  for i := 0 to tries - 1 do
    if self.useObject(color, tolerance, colorSettings, bounds, midPoint, overText) then
      exit(true);
end;

function TEngine.walkPath(path: TPointArray): boolean;
begin
  if length(path) = 0 then exit(true);
  exit(currentArea.walkPath(path) or self.walkTo(path[high(path)]));
end;

{
  Tries to walk to the given point in a straight line.
}
function TEngine.walkTo(dest: TPoint): boolean;
var
  dx, dy, stepX, stepY, i: integer;
  p: TPoint;
  path: TPointArray;
begin
  p := currentArea.getPlayerPos();
  if (p.x = -1) or (p.y = -1) or (dest.x = -1) or (dest.y = -1) then exit(false);
  dx := dy := 20;
  if p.x > dest.x then dx *= -1;
  if p.y > dest.y then dy *= -1;
  stepX := floor(abs((dest.x - p.x) / dx));
  stepY := floor(abs((dest.y - p.y) / dy));
  if stepX < stepY then setLength(path, stepY + 1)
  else setLength(path, stepX + 1);

  for i := 0 to high(path) do
  begin
    if i < stepX then p.x += dx
    else p.x := dest.x;
    if i < stepY then p.y += dy
    else p.y := dest.y;
    path[i] := Point(p.x, p.y);
  end;
  exit(currentArea.walkPath(path));
end;

procedure TEngine.__declarePlayers();
var
  i: integer;
begin
  players.setup(playerForm.players);

  if self.declarePlayers <> nil then
    self.declarePlayers();

  for i := 0 to high(players) do
    with playerForm.players[i] do
    begin
      players[i].world := strToInt(settings[high(playerForm.editBoxLabels) - 2]);
      players[i].integers[P_PLAY_TIME] := strToInt(settings[high(playerForm.editBoxLabels) - 1]) * 60000;
      players[i].integers[P_BREAK_LENGTH] := strToInt(settings[high(playerForm.editBoxLabels)]) * 60000;
      players[i].booleans[P_TAKE_BREAKS] := strToBool(settings[high(settings)]);

      // Set up the time for the next break, if we are taking breaks.
      if players[i].booleans[P_TAKE_BREAKS] then
        players[i].integers[P_NEXT_BREAK] := getGaussRangePercentage(players[i].integers[P_PLAY_TIME], 0.2);
    end;
end;

procedure TEngine.__clearActivity();
begin
  writeLn('Freeing activity resources');
  if self.__activity <> nil then
  begin
    writeLn(self.__activity^);
    self.__activity^.dispose();
    dispose(self.__activity);
  end;
  self.__activity := nil;
end;

function TEngine.__execute(task: TTask): boolean;
var
  status: TTaskStatus;
  tasks: TTaskList;
begin
  wait(gaussRangeInt(0, 1200));
  writeLn('Starting task "', task.name, '"');
  if not self.walkPath(task.pathToTask) then exit(false);
  status := task.run();
  writeLn('Task "', task.name, '" finished with status ', status);
  exit(status > TTaskStatus.ERR);
end;

function TEngine.__execute(tasks: TTaskList): boolean; overload;
var currentTask: integer;
begin
  for currentTask := 0 to high(tasks) do
    if not self.__execute(tasks.get(currentTask)) then exit(false);
  exit(true);
end;

procedure TEngine.__initForm();
begin
  with playerForm do
  begin
    editBoxLabels.combine(['World', 'Take a break around (mins)', 'Duration of break (mins)']);
    editBoxDefaults.combine(['-1', '60', '5']);
    editBoxHints.combine([
      'What world to use? (-1 means use current, 0 means use random)',
      'Around how long to run before taking a break?',
      'Around how long should the break be?'
    ]);

    checkBoxLabels.combine(['Take Breaks']);
    checkBoxDefaults.combine(['True']);
    checkBoxHints.combine(['Should I take breaks?']);
  end;
end;

procedure TEngine.__runLoop();
var timer: TTimeMarker;
begin
  print('TEngine.__runLoop()');
  SRL_Events[EVENT_ANTIBAN] := self.antiBan;
  while players.getActive() > 0 do
  begin
    timer.start();
    if not isLoggedIn() then players[currentPlayer].login();
    wait(Random(500, 1500));
    closeAdWindow();
    closePollWindow();
    exitTreasure();
    mainscreen.setAngle(MS_ANGLE_HIGH);

    // Setup activity if needed & only start loop if everything is fine.
    if self.__activity = nil then
      players[currentPlayer].isActive :=
        ((self.__activity := self.loadActivity()) <> nil) and
        ((self.__activity^.setup = nil) or (self.__activity^.setup()));

    with players[currentPlayer] do
    begin
      while isLoggedIn() and isActive and (not self.__activity^.isDone()) and
          ((not booleans[P_TAKE_BREAKS]) or (timer.getTime() <= integers[P_NEXT_BREAK])) do
      begin
        isActive := self.__execute(self.__activity^.tasks);
        inc(integers[P_LOOP_COUNT]);

        self.printProgress(integers[P_TIME_RAN] + timer.getTime());
      end;
    end;
    writeLn('isDone? ', self.__activity^.isDone());
    inc(players[currentPlayer].integers[P_TIME_RAN], timer.getTime());

    if players[currentPlayer].isActive then
      if self.__activity^.isDone() then
        self.__clearActivity()
      else
        self.takeBreak(players[currentPlayer].integers[P_BREAK_LENGTH])
    else if players.getActive() > 0 then
      players.randomNext(false);

    if isLoggedIn() then
      players[currentPlayer].logout();
    timer.reset();
  end;
end;

function TEngine.run(): boolean;
begin
  self.__activity := nil;
  if self.loadActivity = nil then exit(false);

  self.__initForm();
  runPlayerForm();
  if not playerForm.isScriptReady then exit(false);

  self.__declarePlayers();
  if not setupSRL() then exit(false);

{$IFDEF SMART}
  smartEnableDrawing := true;
{$ENDIF}
  addOnTerminate('destroyEngine');
  self.__runLoop();
  exit(true);
end;

procedure destroyEngine();
begin
  engine.__clearActivity();
end;
