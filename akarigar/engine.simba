{$IFDEF DEBUG}
  {$IFDEF SMART}
    {$DEFINE SMART_DEBUG}
  {$ENDIF}
{$ENDIF}

{$include_once srl-6/srl.simba}
{$include_once srl-6/lib/misc/srlplayerform.simba}

{$include_once SPS/lib/sps-rs3.simba}

{$include_once engine/util/logger.simba}
{$include_once engine/util/util.simba}

{$include_once engine/core/objectsettings.simba}
{$include_once engine/core/item.simba}
{$include_once engine/core/playermanager.simba}
{$include_once engine/core/resourcemanager.simba}
{$include_once engine/core/task.simba}
{$include_once engine/core/activity.simba}
{$include_once engine/core/activitymanager.simba}

{$include_once engine/util/updater.simba}
{$f-}

type TEngine = record
  declarePlayers: procedure();

  __activityManager: TActivityManager;
end;

var engine: TEngine;

// Setters =====================================================================

procedure TEngine.setAntiBan(antiBan: procedure());
begin
  SRL_Events[EVENT_ANTIBAN] := antiBan;
end;

procedure TEngine.setDeclarePlayers(declarePlayers: procedure());
begin
  self.declarePlayers := declarePlayers;
end;

// End Setters =================================================================

procedure TEngine.__declarePlayers();
var
  i, j: integer;
begin
  players.setup(playerForm.players);

  if self.declarePlayers <> nil then
    self.declarePlayers();

  for i := 0 to high(players) do
    with playerForm.players[i] do
    begin
      j := high(playerForm.editBoxLabels) - 3;
      players[i].world := strToInt(settings[j]);
      players[i].integers[P_PLAY_TIME] := strToInt(settings[inc(j)]) * 60000;
      players[i].integers[P_BREAK_LENGTH] := strToInt(settings[inc(j)]) * 60000;
      players[i].integers[P_SESSION_TIME] := strToInt(settings[inc(j)]) * 60000;
    end;
end;

procedure TEngine.__destroy();
begin
  self.__activityManager.destroy();
  resourceManager.clear();
end;

procedure TEngine.__doAntiBan();
begin
  randomlyWait(500, 1000);
  if minimap.isPlayerMoving() or (not isMouseOnClient()) then
  begin
    randomlyWait(1000, 2000);
    exit;
  end;

  case random(100) of
    1..5:
      if self.__activityManager.getRelatedSkill() = SKILL_NONE then
        hoverRandomSkill()
      else
        hoverSkill(self.__activityManager.getRelatedSkill());
    6..15: sleepAndMoveMouse(randomRange(200, 1000));
    16..25:
    begin
      if random() > 0.5 then pickupMouse();
      smallRandomMouse(gaussRangeInt(400, 1200));
    end;
    26..50: mouseOffClient(OFF_CLIENT_RANDOM);
  end;

  randomlyWait(1000, 2000);
end;

procedure TEngine.__initPlayerForm();
begin
  with playerForm do
  begin
    name := __SCRIPT_NAME;
    scriptSettingsPath := 'akarigar';

    editBoxLabels.combine([
      'World',
      'Take a break every (mins)',
      'Duration of break (mins)',
      'Switch players after (mins)'
    ]);
    editBoxDefaults.combine(['-1', '60', '5', '120']);
    editBoxHints.combine([
      'What world to use? (-1 means use current, 0 means use random)',
      'Approximately how long to play before taking a break? (0 for no breaks)',
      'Approximately how long should every break be?',
      'Approximately how long to play before switching players? (0 to never switch players)'
    ]);
  end;
end;

procedure TEngine.__notifyNewPlayer();
begin
  self.__activityManager.destroy();
  playerManager.setup();
  resourceManager.setup(players[currentPlayer].nickname);
end;

procedure TEngine.__runLoop();
begin
  print('TEngine.__runLoop()');
  self.__notifyNewPlayer();
  while players.getActive() > 0 do
  begin
    if players[currentPlayer].login() and randomlyWait(500, 1500) then
    begin
      closeAdWindow();
      closePollWindow();
      exitTreasure();
      mainscreen.setAngle(MS_ANGLE_HIGH);
    end;

    with players[currentPlayer] do
    begin
      // Setup activity if needed & start loop if everything is fine.
      if self.__activityManager.isActivityDone() then
        isActive := self.__activityManager.next() <> nil;

      while playerManager.isActive() and (not self.__activityManager.isActivityDone()) do
      begin
        self.__activityManager.printProgress();
        if not self.__activityManager.run() then break;
      end;
    end;
    logger.debug('isActive: %s', [boolToStr(players[currentPlayer].isActive)]);
    logger.debug('isBreakTime: %s', [boolToStr(playerManager.isBreakTime())]);
    logger.debug('isDone: %s', [boolToStr(self.__activityManager.isActivityDone())]);
    logger.debug('isSessionOver: %s', [boolToStr(playerManager.isSessionOver())]);

    if playerManager.isSessionOver() then
    begin
      players[currentPlayer].logout();
      players.randomNext(players[currentPlayer].isActive);
      self.__notifyNewPlayer();
    end;

    if playerManager.isBreakTime() then
    begin
      self.__activityManager.pause();
      resourceManager.saveResources();
      playerManager.takeBreak();
    end;
  end;
end;

procedure defaultAntiBan();
begin
  engine.__doAntiBan();
end;

function TEngine.run(): boolean;
begin
  clearDebug();
  updateEngine();
  self.__initPlayerForm();
  runPlayerForm();
  if not playerForm.isScriptReady then exit(false);

  self.__declarePlayers();
  {$IFNDEF DEBUG}
  disableSRLDebug := true;
  {$ENDIF}
  {$IFDEF SMART}
  smartEnableDrawing := true;
  smartShowConsole := false;
  {$ENDIF}
  if not setupSRL() then exit(false);
  {$IFDEF SMART}
  smartImage.clear();
  {$ENDIF}
  logger.info('Starting up engine.');

  if SRL_Events[EVENT_ANTIBAN] = nil then
    self.setAntiBan(defaultAntiBan);

  addOnTerminate('destroyEngine');
  self.__runLoop();
  exit(true);
end;

procedure destroyEngine();
begin
  engine.__destroy();
end;
