{$include_once ../engine.simba}
{$f-}

type TCookTask = record(TTask)
  itemsBurned: integer;

  objectSettings: record
    color, tolerance: integer;
    hue, sat: extended;
  end;
end;

function TCookTask.__cook(): TTaskStatus;
var i, x, y, rawCount: Integer = 0;
begin
  rawCount := tabBackpack.count();
  if not engine.useObject(
    self.objectSettings.color, // color
    self.objectSettings.tolerance, // tolerance
    colorSetting(2, self.objectSettings.hue, self.objectSettings.sat), // colorSettings
    mainscreen.getBounds(), // bounds
    Point(-1, -1), // midPoint
    ['Cook-at', 'ook', '-at', 'range'], // overText
    self.tries // tries
  ) then exit(TTaskStatus.ERR);

  while (engine.randomlyWait(1000, 1500)) and (not productionScreen.clickStart()) and (inc(i) < self.tries) do;
  if (i >= self.tries) or (not tabBackpack.waitSlotPixelChange(tabBackpack.count(), gaussRangeInt(110000, 1300000)))
    then exit(TTaskStatus.ERR);

  inc(self.itemsBurned, rawCount - tabBackpack.count());
  inc(self.itemsGained, tabBackpack.count());
  if findColor(x, y, 65535, tabBackpack.getBounds()) then
  begin
    inc(self.itemsBurned);
    dec(self.itemsGained);
  end;
  exit(TTaskStatus.DONE);
end;

function TCookTask.__reportProgress(timeRan: integer): extended;
begin
  writeLn(formatProgressLine(
    'Food cooked successfully: %d/' +
      intToStr(self.itemsBurned + self.itemsGained) + ' (%d/hr)',
    self.itemsGained,
    timeRan
  ));
  writeLn(formatProgressLine(
    'XP gained from cooking: %d (%d/hr)',
    round(self.itemsGained * self.xpPerItem),
    timeRan
  ));
  exit(self.itemsGained * self.xpPerItem);
end;

function CookTask(
  location, tries: integer;
  xpPerItem: extended;
  pathToTask: TPointArray
): ^TCookTask;
var task: ^TCookTask;
begin
  new(task);
  task^.init('Cook', location, tries, xpPerItem, pathToTask, task^.__cook, task^.__reportProgress);
  task^.itemsBurned := 0;

  case location of
    LOCATION_AL_KHARID: task^.objectSettings := [3029703, 8, 0.17, 2.07];
    LOCATION_LUMBRIDGE: task^.objectSettings := [2451907, 4, 0.35, 1.71];
  end;

  exit(task);
end;

function CookTask(args: TStringArray): ^TCookTask; overload;
begin
  if length(args) <> 4 then exit(nil);
  exit(CookTask(
    strToInt(args[0]),
    strToInt(args[1]),
    strToFloat(args[2]),
    strToTPA(args[3])
  ));
end;

{$f+}
