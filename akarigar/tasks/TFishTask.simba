{$include_once ../engine/core/playermanager.simba}
{$include_once ../engine/core/resourcemanager.simba}
{$f-}

const
  __CRAY_DTM = 'm1gAAAHic42JgYGBmZmBgAWJ+KBYG4u9MDAzfmCDiIPwXyG4Eqi0H4mIgrgTiKiDuAeI2IG4H4i4ov7cdxGMiiCUZiAOMRGIEAABCZAot';
  __TROUT_DTM = 'm1gAAAHic42JgYGBmZmBgAWJ+KBYG4u9MDAzfmCDiIPwXyG4Eqi0H4mIgrgTiKiDuAeI2IG4H4i4ov7cdxGMiiCUZiAOMRGIEAABCZAot';
  __SALMON_DTM = 'm1gAAAHic42JgYGBmZmBgAWJ+KBYG4u9MDAzfmCDiIPwXyG4Eqi0H4mIgrgTiKiDuAeI2IG4H4i4ov7cdxGMiiCUZiAOMRGIEAABCZAot';

type TFishTask = record(TTask)
  fishNames: TStringArray;
  fishCaught, fishDtms, fishXp: TIntegerArray;
end;

function TFishTask.__getRiverBounds(): TBox;
var
  x, y: integer;
  riverPoints: TPointArray;
  emptyBox: TBox;
begin
  if not findColorsSpiralTolerance(x, y, riverPoints, 12483174, mainscreen.getBounds(), 6, colorSetting(2, 0.15, 0.90)) then
    exit(emptyBox);
  exit(riverPoints.getBounds());
end;

function TFishTask.__isFishing(): boolean;
var
  x, y: integer;
  fishingPoints: TPointArray;
  bounds: TBox;
  timer: TTimeMarker;
begin
  bounds := mainscreen.playerBox;
  bounds.X1 += mainscreen.playerBox.getWidth();
  bounds.X2 += mainscreen.playerBox.getWidth();
  timer.start();
  while timer.getTime() <= 1500 do
    if findColorsSpiralTolerance(
      x,
      y,
      fishingPoints,
      self.objectSettings^.color,
      bounds,
      self.objectSettings^.tol,
      colorSetting(2, self.objectSettings^.hue, self.objectSettings^.sat)
    ) then exit(true);
  exit(false);
end;

function TFishTask.__hasGear(): boolean;
var x, y: integer;
begin
  exit((self.flag = 0) or (findColor(x, y, 65535, tabBackpack.getBounds())));
end;

{ Walks through all the known spots twice to find & use an active spot. }
function TFishTask.__tryFishing(): boolean;
var i: integer;
begin
  for i := 0 to length(self.objectLocations) * 2 - 1 do
    if playerManager.walkTo(self.objectLocations[i mod length(self.objectLocations)]) and
       playerManager.useObject(self.objectSettings) then exit(true);
  exit(false);
end;

function TFishTask.__goFish(): boolean;
var
  i: integer;
  timer: TTimeMarker;
begin
  if not self.__tryFishing() then exit(false);

  // Wait until we are either logged out, our bp is full or this spot dies out.
  i := tabBackpack.count();
  timer.start();
  while (isLoggedIn()) and (not tabBackpack.isFull()) and (self.__isFishing()) do
  begin
    // Just a fail safe.. We should be catching at least one fish every 30 seconds.
    if timer.getTime() > 30000 then
      if i = tabBackpack.count() then break
      else
      begin
        i := tabBackpack.count();
        timer.reset();
        timer.start();
      end;
    if SRL_Events[EVENT_ANTIBAN] <> nil then SRL_Events[EVENT_ANTIBAN]()
    else playerManager.randomlyWait(750, 1250);
  end;
  exit(true);
end;

function TFishTask.__fish(): TTaskStatus;
var
  fishingPoints: TPointArray;
  fishingSpots: T2DPointArray;
  i: integer;
  timer: TTimeMarker;
begin
  timer.start();
  while (timer.getTime() < 30000) and (self.__hasGear()) and (not tabBackpack.isFull()) do
  begin
    if playerManager.randomlyWait() and self.__goFish() then
    begin
      timer.reset();
      timer.start();
    end;
  end;

  for i := 0 to high(self.fishCaught) do
    inc(self.fishCaught[i], tabBackpack.countDtm(self.fishDtms[i]));
  if tabBackpack.isFull() then exit(TTaskStatus.DONE)
  else exit(TTaskStatus.ERR);
end;

procedure TFishTask.__reportFishingProgress(
  fish: string;
  count, xp, timeRan: integer
);
begin
  writeLn(formatProgressLine(
    fish + ' caught: %d (%d/hr)',
    count,
    timeRan
  ));
  writeLn(formatProgressLine(
    'XP gained from catching ' + fish + ': %d (%d/hr)',
    count * xp,
    timeRan
  ));
end;

function TFishTask.__reportProgress(timeRan: integer): extended;
var i, totalXp: integer = 0;
begin
  self.itemsGained := 0;
  for i := 0 to high(self.fishNames) do
  begin
    resourceManager.updateResource(self.fishNames[i], self.fishCaught[i]);
    self.__reportFishingProgress(
      self.fishNames[i], self.fishCaught[i], self.fishXp[i], timeRan
    );
    self.itemsGained += self.fishCaught[i];
    totalXp += self.fishCaught[i] * self.fishXp[i];
  end;

  writeLn(formatProgressLine(
    'Total fish caught: %d (%d/hr)',
    self.itemsGained,
    timeRan
  ));
  writeLn(formatProgressLine(
    'Total XP gained from catching fish: %d (%d/hr)',
    totalXp,
    timeRan
  ));
  exit(totalXp);
end;

procedure TFishTask.__free();
var i: integer;
begin
  writeln('freeing fish dtms: ', self.fishDtms);
  for i := 0 to high(self.fishDtms) do
    freeDtm(self.fishDtms[i]);
end;

function FishTask(args: TStringArray): ^TFishTask;
var task: ^TFishTask;
begin
  new(task);
  task^.init('Fish', args, 0, task^.__fish, task^.__reportProgress, task^.__free);
  if task^.flag = 0 then
  begin
    task^.fishNames := ['Raw crayfish'];
    task^.fishDtms := [DTMFromString(__CRAY_DTM)];
    task^.fishCaught := [0];
    task^.fishXp := [10];
  end else
  begin
    task^.fishNames := ['Raw trout', 'Raw salmon'];
    task^.fishDtms := [DTMFromString(__TROUT_DTM), DTMFromString(__SALMON_DTM)];
    task^.fishXp := [50, 70];
  end;
  exit(task);
end;

{$f+}
