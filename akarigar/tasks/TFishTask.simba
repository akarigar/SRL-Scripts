{$f-}

type TFishTask = TTask;

function TFishTask.__isFishing(): boolean;
var
  x, y: integer;
  fishingPoints: TPointArray;
  bounds: TBox;
  timer: TTimeMarker;
begin
  bounds := mainscreen.playerBox;
  case self.flag of
    0: y := -mainscreen.playerBox.getHeight();
    1: x := mainscreen.playerBox.getWidth();
    2: y := mainscreen.playerBox.getHeight();
    3: x := -mainscreen.playerBox.getWidth();
  end;
  inc(bounds.x1, x);
  inc(bounds.x2, x);
  inc(bounds.y1, y);
  inc(bounds.y2, y);
  timer.start();
  while timer.getTime() <= 1500 do
    if findColorsSpiralTolerance(
      x,
      y,
      fishingPoints,
      self.objectSettings^.color,
      bounds,
      self.objectSettings^.tol,
      colorSetting(2, self.objectSettings^.hue, self.objectSettings^.sat)
    ) then exit(true);
  exit(false);
end;

function TFishTask.__hasGear(): boolean;
var x, y: integer;
begin
  exit(
    (length(self.recipe.itemsIn) = 0) or
    (findColor(x, y, 65535, tabBackpack.getBounds()))
  );
end;

{ Walks through all the known spots twice to find & use an active spot. }
function TFishTask.__tryFishing(): boolean;
var i: integer;
begin
  for i := 0 to length(self.objectLocations) * 2 - 1 do
    if playerManager.walkTo(
         self.objectLocations[i mod length(self.objectLocations)], self.location
       ) and
       playerManager.useObject(self.objectSettings) then exit(true);
  exit(false);
end;

function TFishTask.__goFish(): boolean;
var
  i: integer;
  timer: TTimeMarker;
begin
  if not self.__tryFishing() then exit(false);

  // Wait until we are either logged out, our bp is full or this spot dies out.
  i := tabBackpack.count();
  timer.start();
  while (isLoggedIn()) and (not tabBackpack.isFull()) and (self.__isFishing()) do
  begin
    // Just a fail safe.. We should be catching at least one fish every 30 seconds.
    if timer.getTime() > 30000 then
      if i = tabBackpack.count() then break
      else
      begin
        i := tabBackpack.count();
        timer.reset();
        timer.start();
      end;
    if SRL_Events[EVENT_ANTIBAN] <> nil then SRL_Events[EVENT_ANTIBAN]()
    else randomlyWait(750, 1250);
  end;
  exit(true);
end;

function TFishTask.__fish(): TTaskStatus;
var
  fishingPoints: TPointArray;
  fishingSpots: T2DPointArray;
  i: integer;
  timer: TTimeMarker;
begin
  timer.start();
  while (timer.getTime() < 30000) and (self.__hasGear()) and (not tabBackpack.isFull()) do
  begin
    if randomlyWait() and self.__goFish() then
    begin
      timer.reset();
      timer.start();
    end;
  end;

  if tabBackpack.isFull() then exit(TTaskStatus.DONE)
  else exit(TTaskStatus.ERR);
end;

function FishTask(data: string): ^TFishTask;
var task: ^TFishTask;
begin
  new(task);
  task^.init('Fish', data, task^.__fish);
  task^.skill := SKILL_FISHING;
  exit(task);
end;

{$f+}
