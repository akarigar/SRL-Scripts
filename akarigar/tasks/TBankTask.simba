{$f-}

type TBankTask = TTask;

function TBankTask.__bank(): TTaskStatus;
var i: integer;
begin
  if (length(self.recipe.itemsIn) = 0) and (tabBackpack.count() = 0) then
    exit(TTaskStatus.DONE);
  logger.debug('Length %d', [length(self.recipe.itemsIn)]);
  logger.debug('count %d', [tabBackpack.count()]);

  while (randomlyWait()) and
        (not bankScreen.open(self.flag)) and
        (inc(i) < self.tries) do;
  if i >= self.tries then exit(TTaskStatus.ERR);
  i := 0;

  if (self.loopCount = 0) and (length(self.recipe.itemsIn) > 0) then
    if bankScreen.makePreset(@self.recipe.itemsIn) then exit(TTaskStatus.DONE)
    else exit(TTaskStatus.ERR);

  while (randomlyWait()) and
        (not self.__doTransaction()) and
        (inc(i) < self.tries) do;
  if i >= self.tries then exit(TTaskStatus.ERR);
  i := 0;

  while (randomlyWait()) and
        (not bankScreen.close()) and
        (inc(i) < self.tries) do;
  if (i >= self.tries) or (not randomlyWait()) then
    exit(TTaskStatus.ERR);
  exit(TTaskStatus.DONE);
end;

function TBankTask.__doTransaction(): boolean;
begin
  if (length(self.recipe.itemsIn) = 0) then
    exit(bankScreen.quickDeposit(QUICK_DEPOSIT_INVENTORY));
  exit(bankScreen.clickButton(BANK_BUTTON_PRESET_1));
end;

function BankTask(data: string): ^TBankTask;
var task: ^TBankTask;
begin
  new(task);
  task^.init('Bank', data, task^.__bank);
  exit(task);
end;

{$f+}
