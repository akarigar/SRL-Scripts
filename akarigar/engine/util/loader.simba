{$include_once ../core/activity.simba}
{$include_once ../../tasks/TBankTask.simba}
{$include_once ../../tasks/TCookTask.simba}
{$include_once ../../tasks/TFishTask.simba}
{$f-}

function Task(name: string; args: TStringArray): PTask;
begin
  case name of
    'BankTask': exit(BankTask(args));
    'CookTask': exit(CookTask(args));
    'FishTask': exit(FishTask(args));
    else exit(nil);
  end;
end;

procedure TActivity.__processRequirement(data: string);
var
  i: integer;
  resources: TStringArray;
begin
  resources := multiBetween(data, '<item ', '/item>');

  for i := 0 to high(resources) do
  begin
    self.requirement.items.append(between('>', '<', resources[i]));
    self.requirement.amounts.append(strToInt(between('amount="', '"', resources[i])));
  end;
end;

procedure TActivity.fromString(data: string);
var
  i: integer;
  taskData: TStringArray;
begin
  self.name := between('<activity name="', '">', data);
  data := between('<activity name="', '</activity>', data);
  if pos('<quota>', data) > 0 then
    self.quota := strToInt(between('<quota>', '</quota>', data));

  taskData := multiBetween(data, '<task ', '</task>');
  for i := 0 to high(taskData) do
    self.appendTask(Task(
      between('name="', '">', taskData[i]),
      multiBetween(taskData[i], '<arg>', '</arg>')
    ));

  self.__processRequirement(between('<requirement>', '</requirement>', data));
end;

function Activity(data: string): PActivity;
var activity: PActivity;
begin
  new(activity);
  activity^.fromString(data);
  exit(activity);
end;

{$f+}
