{$f-}

const SKILL_NAMES = [
  'Attack',
  'Hitpoints',
  'Mining',
  'Strength',
  'Agility',
  'Smithing',
  'Defence',
  'Herblore',
  'Fishing',
  'Range',
  'Thieving',
  'Cooking',
  'Prayer',
  'Crafting',
  'Firemaking',
  'Magic',
  'Fletching',
  'Woodcutting',
  'Runecrafting',
  'Slayer',
  'Farming',
  'Construction',
  'Hunter',
  'Summoning',
  'Dungeoneering',
  'Divination'
];

const LOCATION_NONE = 1338;
const SKILL_NONE = 1338;

function getGaussRangePercentage(value: integer; percentage: extended = 0.1): integer;
var delta: integer;
begin
  delta := round(value * percentage);
  exit(gaussRangeInt(value - delta, value + delta));
end;

function getHourlyRate(total, totalTime: LongWord): integer;
begin
  exit(round(total * (3600 / (totalTime / 1000))));
end;

function formatProgressLine(prefix: string; value, totalTime: integer): string;
begin
  exit(format('%s: %d (%d/hr)', [prefix, value, getHourlyRate(value, totalTime)]));
end;

function isMouseOnClient(): boolean;
var w, h, x, y: integer;
begin
  getClientDimensions(w, h);
  getMousePos(x, y);
  exit((x >= 0) and (x <= w) and (y >= 0) and (y <= h));
end;

function randomlyWait(min: integer = 250; max: integer = 750): boolean;
begin
  wait(gaussRangeInt(min, max));
  exit(true);
end;

function strToPoint(str: string): TPoint;
var data: TStringArray;
begin
  data := explode(',', between('(', ')', str));

  if length(data) <> 2 then exit(Point(-1, -1));
  exit(Point(strToInt(data[0]), strToInt(data[1])));
end;

function strToTPA(str: string): TPointArray;
var
  data: TStringArray;
  i: integer;
  tpa: TPointArray;
begin
  data := explode(';', str);

  for i := 0 to high(data) do
    tpa.append(strToPoint(data[i]));
  exit(tpa);
end;

procedure T2DPointArray.prune(minLength: integer);
var i: integer;
begin
  if minLength <= 0 then exit;
  for i := high(self) downto 0 do
    if length(self[i]) < minLength then
      self.deleteIndex(i);
end;

function TBoxArray.indexInArray(const p: TPoint): integer;
var i: integer;
begin
  for i := 0 to high(self) do
    if self[i].isPointInside(p) then exit(i);
  exit(-1);
end;

function TRSTabBackpack.countItemAmount(dtm: integer): integer;
var
  x, y: integer;
  items: TIntegerArray;
begin
  if not self.open() then exit(0);

  items := findItem(dtm, self.getSlotBoxes(), false);
  result := length(items);

  if (result = 1) and findColor(x, y, 65535, self.getSlotBox(items[0] + 1)) then
    result := getItemAmount(self.getSlotBox(items[0] + 1));
end;

function TRSTabBackpack.isItemStackable(dtm: integer): boolean;
var
  x, y: integer;
  items: TIntegerArray;
begin
  if not self.open() then exit(false);

  items := findItem(dtm, self.getSlotBoxes(), false);
  exit((length(items) = 1) and findColor(x, y, 65535, self.getSlotBox(items[0] + 1)));
end;

{$f+}
