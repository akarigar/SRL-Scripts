{$f-}

const
  // Integers
  P_BREAK_COUNT := 99;
  P_BREAK_LENGTH := P_BREAK_COUNT - 1;
  P_LOOP_COUNT := P_BREAK_LENGTH - 1;
  P_NEXT_BREAK := P_LOOP_COUNT - 1;
  P_PLAY_TIME := P_NEXT_BREAK - 1;
  P_TIME_BREAKED := P_PLAY_TIME - 1;
  P_TIME_RAN := P_TIME_BREAKED - 1;

  // Booleans
  P_TAKE_BREAKS := 99;


type TPlayerManager = record
  area: ^TSPSArea;
  currentLocation: integer;
  __nextBreakTime: LongWord;
end;

var playerManager: TPlayerManager = [nil, -1, 0];

function TPlayerManager.findObject(obj: PObjectSettings; out b: Tbox): boolean;
var
  i, x, y: integer;
  tpa: TPointArray;
  atpa: T2DPointArray;
  bounds, relativeBounds: TBox;
begin
  // Figure out certain bounds
  bounds := mainscreen.getBounds();
  if obj^.relative <> nil then
  begin
    if not self.findObject(obj^.relative, relativeBounds) then exit(false);
    if obj^.relation = 1 then
      bounds := relativeBounds;
  end;

  // Only continue if we find potential objects
  if not findColorsSpiralTolerance(
    x,
    y,
    tpa,
    obj^.color,
    bounds,
    obj^.tol,
    colorSetting(2, obj^.hue, obj^.sat)
  ) then exit(false);

  // Filter out the player & make a sorted TPointArray
  mainscreen.filterPointsPlayer(tpa);

  if obj^.mode = 0 then
    atpa := tpa.toATPA(obj^.w, obj^.h)
  else if obj^.mode = 1 then
    atpa := tpa.cluster(obj^.w, obj^.h);

  atpa.prune(obj^.min);
  if (obj^.sort = 1) and (obj^.relation = 2) then
    atpa.sortFromMidPoint(relativeBounds.getMiddle())
  else if obj^.sort = 1 then
    atpa.sortFromMidPoint(mainscreen.playerPoint)
  else if obj^.sort = 2 then
    atpa.sortBySize();

  {$IFDEF SMART_DEBUG}
  smartImage.debugATPA(atpa);
  smartImage.drawBox(bounds);
  wait(1000);
  smartImage.clear();
  {$ENDIF}

  // If we don't have any over text, but we found potential objects, then the
  // entire atpa is our object.
  if length(obj^.overText) = 0 then
  begin
    b := atpa.getBounds();
    exit(true);
  end;

  // The first potential objects matching our option or over text is the object
  // we are looking for.
  for i := 0 to high(atpa) do
  begin
    b := atpa[i].getBounds();
    mouse(atpa[i][random(length(atpa[i]))]);
    if self.randomlyWait() and isMouseOverText(obj^.overText) then
    begin
      if length(obj^.optionText) = 0 then exit(true);
      fastClick(MOUSE_RIGHT);
      if chooseOption.optionsExist(obj^.optionText) then exit(true);
    end;
  end;
  exit(false);
end;

function TPlayerManager.getSkills(): string;
var
  i: integer;
  str: string = '[';
begin
  for i := 0 to SKILL_COUNT - 1 do
  begin
    if i > 0 then str += ',';
    str += intToStr(tabStats.getSkillLevel(i));
  end;
  exit(str + ']');
end;

function TPlayerManager.isActive(): boolean;
begin
  exit(isLoggedIn() and players[currentPlayer].isActive);
end;

function TPlayerManager.isBreakTime(): boolean;
begin
  exit(
    (players[currentPlayer].booleans[P_TAKE_BREAKS]) and
    (getSystemTime() > self.__nextBreakTime)
  );
end;

function TPlayerManager.isMember(): boolean;
begin
  exit(players[currentPlayer].isMember);
end;

procedure TPlayerManager.loadArea(location: integer);
begin
  if self.area <> nil then dispose(self.area);
  new(self.area);
  self.area^.setup('LOCATION_' + intToStr(location), RUNESCAPE_OTHER);
end;

function TPlayerManager.randomlyWait(min: integer = 250; max: integer = 750): boolean;
begin
  wait(gaussRangeInt(min, max));
  exit(true);
end;

procedure TPlayerManager.setupBreak();
begin
  self.__nextBreakTime :=
    getSystemTime() + getGaussRangePercentage(players[currentPlayer].integers[P_PLAY_TIME], 0.2);
end;

procedure TPlayerManager.takeBreak();
var
  time, timeRemaining: integer;
  timer: TTimeMarker;
begin
  with players[currentPlayer] do
  begin
    timeRemaining := time := getGaussRangePercentage(
      players[currentPlayer].integers[P_BREAK_LENGTH]
    );
    writeLn('Taking a break for ', msToTime(timeRemaining, TIME_SHORT));

    if isLoggedIn() then
      if Random() > 0.8 then logout()
      else exitToLobby();

    timer.start();
    while (timeRemaining := time - timer.getTime()) > 60000 do
    begin
      writeLn('Break finishes in ', msToTime(timeRemaining, TIME_SHORT));
      wait(60000);
    end;
    if timeRemaining > 0 then
      wait(timeRemaining);

    inc(integers[P_TIME_BREAKED], timer.getTime());
    inc(integers[P_BREAK_COUNT]);
    self.setupBreak();
    writeLn('Break finished. Resuming script');
  end;
end;

function TPlayerManager.useObject(obj: PObjectSettings): boolean;
var bounds: TBox;
begin
  if not findObject(obj, bounds) then exit(false);
  if length(obj^.optionText) = 0 then
  begin
    wait(100 + random(250));
    fastClick(MOUSE_LEFT);
    exit(self.randomlyWait() and minimap.waitPlayerMoving());
  end;
  exit(self.randomlyWait() and chooseOption.select(obj^.optionText) and minimap.waitPlayerMoving());
end;

function TPlayerManager.waitWhileWorking(minShift: integer = 200): boolean;
var
  count: integer;
  timer: TTimeMarker;
begin
  count := tabBackpack.count();
  result := false;
  timer.start();
  while (count := getPixelShiftAverage(mainscreen.playerBox, 100, 1000)) >= minShift do
  begin
    {$IFDEF DEBUG}
    writeln('Waiting while working, shift = ', count);
    {$ENDIF}
    result := true;
    if SRL_Events[EVENT_ANTIBAN] <> nil then SRL_Events[EVENT_ANTIBAN]();
  end;
  {$IFDEF DEBUG}
  writeln('Stopped working, shift = ', count);
  {$ENDIF}
end;

function TPlayerManager.walkPath(path: TPointArray; location: integer): boolean;
begin
  if length(path) = 0 then exit(true);
  if not self.__ensureCorrectLocation(location) then exit(false);
  exit(self.area^.walkPath(path) or self.walkTo(path[high(path)], location));
end;

{
  Tries to walk to the given point in a straight line.
}
function TPlayerManager.walkTo(dest: TPoint; location: integer): boolean;
var
  dx, dy, stepX, stepY, i: integer;
  p: TPoint;
  path: TPointArray;
begin
  if not self.__ensureCorrectLocation(location) then exit(false);
  p := self.area^.getPlayerPos();
  if (p.x = -1) or (p.y = -1) or (dest.x = -1) or (dest.y = -1) then exit(true);
  dx := dy := 20;
  if p.x > dest.x then dx *= -1;
  if p.y > dest.y then dy *= -1;
  stepX := floor(abs((dest.x - p.x) / dx));
  stepY := floor(abs((dest.y - p.y) / dy));
  if stepX < stepY then setLength(path, stepY + 1)
  else setLength(path, stepX + 1);

  for i := 0 to high(path) do
  begin
    if i < stepX then p.x += dx
    else p.x := dest.x;
    if i < stepY then p.y += dy
    else p.y := dest.y;
    path[i] := Point(p.x, p.y);
  end;
  exit(self.area^.walkPath(path));
end;

function TPlayerManager.__ensureCorrectLocation(location: integer): boolean;
begin
  if self.currentLocation = location then exit(true);
  currentLocation := location;
  self.loadArea(location);
  exit(lodestoneScreen.teleportTo(location) and self.randomlyWait(15000, 17000));
end;
