{$include_once objectsettings.simba}
{$include_once ../util/util.simba}
{$f-}

{
  In the future, the idea is to be able to load most of the task's data from
  some local or hosted db. So, things like relevant colors, xp tables etc can
  be created based on location or the name of the item being gained.
}

const FAIL_MAX = 20;

type TTaskStatus = (
  ERR,
  DONE
);

type TTask = record
  name: string;
  location, tries, flag, itemsGained: integer;
  xpPerItem: extended;
  pathToObject, objectLocations: TPointArray;
  objectSettings: PObjectSettings;
  run: function(): TTaskStatus of object;
  reportProgress: function(timeRan: integer): extended of object;
  freeExtras: procedure() of object;
end;

type PTask = ^TTask;

procedure TTask.free();
begin
  if self.freeExtras <> nil then self.freeExtras();
  if self.objectSettings = nil then exit;
  self.objectSettings^.free();
  dispose(self.objectSettings);
end;

procedure TTask.init(
  name: string;
  args: TStringArray;
  xpPerItem: integer;
  run: function(): TTaskStatus of object;
  reportProgress: function(timeRan: integer): extended of object = nil;
  freeExtras: procedure() of object = nil
);
begin
  if not inRange(length(args), 4, 5) then
  begin
    writeLn('ERROR incorrect number of args: ', args);
    exit;
  end;
  self.name := name;
  self.location := strToInt(args[0]);
  self.tries := FAIL_MAX;
  self.flag := strToInt(args[1]);
  self.itemsGained := 0;
  self.xpPerItem := xpPerItem;
  self.pathToObject := strToTPA(args[2]);
  self.objectLocations := strToTPA(args[3]);
  if length(args) = 5 then
    self.objectSettings := xmlToObjectSettings(args[4])
  else self.objectSettings := nil;
  self.run := run;
  if reportProgress = nil then self.reportProgress := self.__reportTaskProgress
  else self.reportProgress := reportProgress;
  self.freeExtras := freeExtras;
end;

function TTask.__reportTaskProgress(timeRan: integer): extended;
begin
  writeLn(formatProgressLine(
    'Items gained from ' + self.name + ': %d (%d/hr)',
    self.itemsGained,
    timeRan
  ));
  writeLn(formatProgressLine(
    'XP gained from ' + self.name + ': %d (%d/hr)',
    round(self.itemsGained * self.xpPerItem),
    timeRan
  ));
  exit(self.itemsGained * self.xpPerItem);
end;

type TTaskList = array of PTask;

procedure TTaskList.append(task: PTask);
begin
  setLength(self, length(self) + 1);
  self[high(self)] := task;
end;

procedure TTaskList.clear();
var i: integer;
begin
  for i := 0 to high(self) do
  begin
    self[i]^.free();
    dispose(self[i]);
  end;
  setLength(self, 0);
end;

function TTaskList.size(): integer;
begin
  exit(length(self));
end;

{$f+}
