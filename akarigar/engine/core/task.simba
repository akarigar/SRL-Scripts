{$include_once ../util/util.simba}
{$f-}

{
  In the future, the idea is to be able to load most of the task's data from
  some local or hosted db. So, things like relevant colors, xp tables etc can
  be created based on location or the name of the item being gained.
}

type TTaskStatus = (
  ERR,
  DONE
);

type TTask = record
  name: string;
  location, tries, itemsGained: integer;
  xpPerItem: extended;
  pathToTask: TPointArray;
  run: function(): TTaskStatus of object;
  reportProgress: function(timeRan: integer): extended of object;
end;

type PTask = ^TTask;

procedure TTask.init(
  name: string;
  location, tries: integer;
  xpPerItem: extended;
  pathToTask: TPointArray;
  run: function(): TTaskStatus of object;
  reportProgress: function(timeRan: integer): extended of object = nil
);
begin
  self.name := name;
  self.location := location;
  self.tries := tries;
  self.itemsGained := 0;
  self.xpPerItem := xpPerItem;
  self.pathToTask := pathToTask;
  self.run := run;
  if reportProgress = nil then self.reportProgress := self.__reportTaskProgress
  else self.reportProgress := reportProgress;
end;

function TTask.__reportTaskProgress(timeRan: integer): extended;
begin
  writeLn(formatProgressLine(
    'Items gained from ' + self.name + ': %d (%d/hr)',
    self.itemsGained,
    timeRan
  ));
  writeLn(formatProgressLine(
    'XP gained from ' + self.name + ': %d (%d/hr)',
    round(self.itemsGained * self.xpPerItem),
    timeRan
  ));
  exit(self.itemsGained * self.xpPerItem);
end;

type TTaskList = array of PTask;

procedure TTaskList.append(task: PTask);
begin
  setLength(self, length(self) + 1);
  self[high(self)] := task;
end;

procedure TTaskList.clear();
var i: integer;
begin
  for i := 0 to high(self) do
    dispose(self[i]);
  setLength(self, 0);
end;

function TTaskList.size(): integer;
begin
  exit(length(self));
end;

{$f+}
