{$include_once ../util/loader.simba}
{$include_once ../util/util.simba}
{$include_once activity.simba}
{$include_once playermanager.simba}
{$include_once task.simba}
{$f-}

const __PAGE__ = 'http://akarigar.com/srl/next.php';

type TActivityManager = record
  __currentActivity: PActivity;
  __previousStatus: TTaskStatus;
end;

procedure TActivityManager.destroy();
begin
  self.__previousStatus := TTaskStatus.DONE;
  if self.__currentActivity <> nil then
  begin
    self.__currentActivity^.clear();
    dispose(self.__currentActivity);
  end;
  self.__currentActivity := nil;
end;

function TActivityManager.getCurrentActivity(): PActivity;
begin
  exit(self.__currentActivity);
end;

function TActivityManager.isActivityDone(): boolean;
begin
  exit((__previousStatus <= TTaskStatus.ERR) or (self.getCurrentActivity()^.isDone()));
end;

function TActivityManager.next(): PActivity;
begin
  self.destroy();
  self.__currentActivity := Activity(getPage(__PAGE__));
  exit(self.getCurrentActivity());
end;

procedure TActivityManager.printProgress(timeRan: integer);
var
  i: integer;
  totalXp: extended = 0;
  task: PTask;
begin
  with players[currentPlayer] do
  begin
    writeLn('================================================================');
    writeLn(self.getCurrentActivity()^.name, ' Progress Report');
    writeLn('Player[', currentPlayer, ']: ', nickname);
    writeLn('Played for ', msToTime(timeRan, TIME_FORMAL));
    writeLn('Breaked for ', msToTime(integers[P_TIME_BREAKED], TIME_FORMAL),' (',
            integers[P_BREAK_COUNT], ' breaks)');

    writeLn('Activity looped ', integers[P_LOOP_COUNT], ' times');
    for i := 0 to high(self.getCurrentActivity()^.tasks) do
    begin
      totalXp += self.getCurrentActivity()^.tasks[i]^.reportProgress(timeRan);
    end;

    writeLn(formatProgressLine('Total XP', round(totalXp), timeRan));
    writeLn('================================================================');
  end;
end;

{ Runs the current activity once. }
function TActivityManager.run(): boolean;
var
  i: integer;
  task: PTask;
begin
  if (self.getCurrentActivity() = nil) or (self.getCurrentActivity()^.tasks.size() = 0) then
    exit(false);

  for i := 0 to high(self.getCurrentActivity()^.tasks) do
  begin
    task := self.getCurrentActivity()^.tasks[i];
    wait(gaussRangeInt(0, 1200));

    writeLn('Starting task "', task^.name, '"');
    if not playerManager.walkPath(task^.pathToObject) then exit(false);
    self.__previousStatus := task^.run();
    writeLn('Task "', task^.name, '" finished with status ', self.__previousStatus);

    if self.__previousStatus <= TTaskStatus.ERR then exit(false);
  end;
  exit(true);
end;

{$f+}
