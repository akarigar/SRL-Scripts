{$include_once ../util/bank.simba}
{$include_once ../util/loader.simba}
{$f-}

const __URL__ = 'http://akarigar.com/srl/activity/%d/next/?items=%s&skills=%s';

type TActivityManager = record
  __activityTimer: TTimeMarker;
  __currentActivity: PActivity;
  __loadCount: integer;
  __previousStatus: TTaskStatus;
end;

procedure TActivityManager.destroy();
begin
  self.__previousStatus := TTaskStatus.OK;
  if self.__currentActivity <> nil then
  begin
    self.__currentActivity^.clear();
    dispose(self.__currentActivity);
  end;
  self.__currentActivity := nil;
end;

function TActivityManager.getRelatedSkill(): integer;
var i: integer;
begin
  if self.__currentActivity = nil then exit(SKILL_NONE);
  for i := high(self.__currentActivity^.tasks) downto 0 do
    if self.__currentActivity^.tasks[i]^.skill <> SKILL_NONE then
      exit(self.__currentActivity^.tasks[i]^.skill);
  exit(SKILL_NONE);
end;

function TActivityManager.isActivityDone(): boolean;
begin
  exit(
    (__previousStatus <= TTaskStatus.ERR) or
    (self.__currentActivity = nil) or
    (self.__currentActivity^.isDone())
  );
end;

function TActivityManager.next(): PActivity;
var url: string;
begin
  logger.info('Deciding what to do next.');
  resourceManager.saveResources();
  url := self.__getUrl();
  self.destroy();
  self.__currentActivity := Activity(getPage(url));

  if self.__currentActivity = nil then
  begin
    logger.err('Couldn''t figure out what to do.');
    exit(nil);
  end;

  logger.info('Decided to run activity "%s."', [self.__currentActivity^.name]);
  self.__setupActivity();
  exit(self.__currentActivity);
end;

procedure TActivityManager.pause();
begin
  self.__activityTimer.pause();
end;

procedure TActivityManager.printProgress();
var
  i: integer;
  totalXp: extended = 0;
  task: PTask;
begin
  with players[currentPlayer] do
  begin
    writeLn('================================================================');
    writeLn('Player[', currentPlayer, ']: ', nickname);
    writeln('Played for ', msToTime(worked.getTime(), TIME_FORMAL));
    writeLn('Breaked for ', msToTime(integers[P_TIME_BREAKED], TIME_FORMAL),' (',
            integers[P_BREAK_COUNT], ' breaks)');
    writeLn('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++');
    writeLn('Current Activity: ', self.__currentActivity^.name);
    writeLn('Activity ran for ', msToTime(self.timeRan(), TIME_FORMAL));
    writeLn(formatProgressLine('Loads done', self.__loadCount, self.timeRan()));

    for i := 0 to high(self.__currentActivity^.tasks) do
      totalXp += self.__currentActivity^.tasks[i]^.reportProgress(self.timeRan());

    writeLn(formatProgressLine('Total XP', round(totalXp), self.timeRan()));
    writeLn('================================================================');
  end;
end;

{ Runs the current activity once. }
function TActivityManager.run(): boolean;
var i: integer;
begin
  if (self.__currentActivity = nil) or (self.__currentActivity^.tasks.size() = 0) then
    exit(false);

  // Start timer if paused
  if self.__activityTimer.paused then
    self.__activityTimer.start();
  inc(self.__loadCount);

  for i := 0 to high(self.__currentActivity^.tasks) do
  begin
    if self.__previousStatus <= TTaskStatus.ERR then exit(false);
    self.__runTask(self.__currentActivity^.tasks[i]);
  end;
  exit(self.__previousStatus > TTaskStatus.ERR);
end;

function TActivityManager.timeRan(): LongWord;
begin
  exit(self.__activityTimer.getTime());
end;

function TActivityManager.__getUrl(): string;
var activityId: integer = 0;
begin
  if self.__currentActivity <> nil then activityId := self.__currentActivity^.id;
  result := stringReplace(
    format(
      __URL__,
      [activityId, resourceManager.toString(), playerManager.getSkills()]
    ),
    ' ',
    '%20',
    [rfReplaceAll]
  );
  if playerManager.isMember() then result += '&member=1';
end;

procedure TActivityManager.__runTask(task: PTask);
begin
  logger.info('Starting %s task.', [task^.name]);
  wait(gaussRangeInt(0, 1200));

  logger.info('Running to %s.', [task^.name]);
  if not playerManager.walkPath(task^.pathToObject, task^.location) then
  begin
    self.__previousStatus := TTaskStatus.ERR;
    exit;
  end;
  logger.info('Started to %s.', [task^.name]);
  self.__previousStatus := task^.run();
  logger.info(
    'Finished %s task with status %s.',
    [task^.name, toStr(self.__previousStatus)]
  );
end;

function TActivityManager.__setupActivity(): boolean;
begin
  if self.__currentActivity = nil then exit(false);

  self.__activityTimer.reset();
  self.__activityTimer.start();
  self.__loadCount := 0;

  if self.__currentActivity^.setupTask = nil then exit(true);
  self.__runTask(self.__currentActivity^.setupTask);
  exit(self.__previousStatus > TTaskStatus.ERR);
end;

{$f+}
